/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Visao;
import DAO.CaixaDAO;
import DAO.ConexaoDAO;
import Modelo.Caixa;
import Modelo.Pedido;
import Modelo.Sessao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author Hermeson Alessandro
 */
public class Tela_caixa extends javax.swing.JFrame {//Tela do caixa.
private Pedido pedidoId;

    /**
     * Creates new form Tela_caixa
     */
    public Tela_caixa() {
        initComponents();
    }
    
    public Tela_caixa(int pedidoId){
        initComponents();
        BuscarDadosDoPedido(pedidoId);
        setSaudacao("Login ativo desde:", Sessao.getDataHoraEntrada());
    }
    
     public void setSaudacao(String saudacao, String dataHora) {
        jLabel6.setText(saudacao + " - " + dataHora);
    }
     /*
     Quando uma nova instância da tela Tela_caixa é criada, ela inicializa todos os componentes da interface.
     Carrega os dados do pedido com Id fornecido e define uma mensagem de suadação com data e hora do login ativo.
     O metodo setSaudacao é utilizado para formatar e definir essa mensagem no componente jlabel6.
     */
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tela_caixa");
        setMinimumSize(new java.awt.Dimension(695, 465));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabel1.setText("Caixa");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(280, 10, 120, 64);

        jLabel2.setText("Id_do_pedido");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(100, 100, 90, 16);

        jTextField1.setEditable(false);
        getContentPane().add(jTextField1);
        jTextField1.setBounds(190, 100, 380, 22);

        jLabel3.setText("Nome do produto");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(100, 140, 100, 16);

        jTextField2.setEditable(false);
        getContentPane().add(jTextField2);
        jTextField2.setBounds(210, 140, 360, 22);

        jLabel4.setText("Valor total do pedido");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(100, 180, 130, 16);

        jTextField3.setEditable(false);
        getContentPane().add(jTextField3);
        jTextField3.setBounds(230, 180, 340, 22);

        jLabel5.setText("Pagamento");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(100, 220, 70, 16);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pago", "Não pago" }));
        getContentPane().add(jComboBox1);
        jComboBox1.setBounds(180, 220, 86, 22);

        jButton1.setText("Confirmar Pedido");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(120, 300, 140, 40);

        jButton3.setText("Cancelar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(320, 300, 90, 40);

        jButton2.setText("Voltar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(480, 300, 90, 40);

        jLabel6.setText("jLabel6");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 400, 690, 16);

        jLabel7.setBackground(new java.awt.Color(0, 255, 255));
        jLabel7.setOpaque(true);
        getContentPane().add(jLabel7);
        jLabel7.setBounds(0, 0, 780, 510);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String pagamento = jComboBox1.getSelectedItem().toString();
        int pedidoId = Integer.parseInt(jTextField1.getText());

        try{
            Connection conn = ConexaoDAO.getConnection();
            if(pagamento.equals("Pago")){
                CaixaDAO dao = new CaixaDAO();
                Caixa caixa = new Caixa();
                caixa.setId_pedido(pedidoId);
                caixa.setNome_produto_pedido(jTextField2.getText());
                caixa.setValor_total_pedido(Double.parseDouble(jTextField3.getText().replace(",", ".")));
                /*
                Obtém o texto de um campo de texto (jTextField3).
                Substitui a vírgula por um ponto para assegurar a correta formatação numérica.
                Converte a string formatada em um valor Double.
                Define o valor total do pedido no objeto caixa com o valor numérico convertido.
                */
                caixa.setPagamento("Pago");
                dao.CadastrarCaixa(caixa);
                JOptionPane.showMessageDialog(null, "Pagamento confirmado, estoque atualizado e registro no caixa criado!");
                Tela_extrato te = new Tela_extrato(pedidoId);
                te.setVisible(true);
                dispose();
            }else{
                JOptionPane.showMessageDialog(null, "Pagamento não confirmado. A quantidade adquirida será devolvida ao estoque!");
                String sql1 = "UPDATE bebida SET q_estoque = q_estoque + (SELECT q_adquirida_do_pedido FROM pedido WHERE id = ?) WHERE cod = (SELECT fk_cod_bebida FROM pedido WHERE id = ?)";
                /*
                Atualiza a quantidade em estoque (q_estoque) na tabela bebida.
                Adiciona a quantidade adquirida (q_adquirida_do_pedido) de um pedido específico (pedido) ao estoque atual.
                Garante que a atualização é aplicada somente à bebida cujo código (cod) corresponde ao código da bebida relacionado ao pedido.
                */
                try(PreparedStatement pstmt1 = conn.prepareStatement(sql1)){
                    pstmt1.setInt(1, pedidoId);
                    pstmt1.setInt(2, pedidoId);
                    pstmt1.executeUpdate();
                }
                CaixaDAO dao = new CaixaDAO();
                Caixa caixa = new Caixa();
                caixa.setId_pedido(pedidoId);
                caixa.setNome_produto_pedido(jTextField2.getText());
                caixa.setValor_total_pedido(Double.parseDouble(jTextField3.getText().replace(",", ".")));
                /*
                Obtém o texto de um campo de texto (jTextField3).
                Substitui a vírgula por um ponto para assegurar a correta formatação numérica.
                Converte a string formatada em um valor Double.
                Define o valor total do pedido no objeto caixa com o valor numérico convertido.
                */
                caixa.setPagamento("Não pago");
                dao.CadastrarCaixa(caixa);
                Tela_extrato te = new Tela_extrato(pedidoId);
                te.setVisible(true);
                dispose();
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, "Erro ao atualizar o estoque ou registrar no caixa: "+e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JOptionPane.showMessageDialog(null, "Pedido cancelado, Voltando para o menu do cliente!");
        Tela_inicial_cliente tic = new Tela_inicial_cliente();
        tic.setSaudacao("Login ativo desde:", Sessao.getDataHoraEntrada());
        tic.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Tela_confirmacao_pedido tcp = new Tela_confirmacao_pedido();
        tcp.setSaudacao("Login ativo desde:", Sessao.getDataHoraEntrada());
        tcp.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
    /*
    O método jButton1ActionPerformed processa o pagamento de um pedido, atualiza o
    estoque de acordo com o pagamento (confirmado ou não), e registra a transação no caixa.
    Ele exibe mensagens de confirmação ou erro conforme necessário e abre uma nova tela
    de extrato enquanto fecha a atual. Em resumo, ele automatiza a lógica de gerenciamento
    de pedidos e estoque, e registra as informações no sistema de caixa.
    */
    
    private void BuscarDadosDoPedido(int pedidoId){
        try{
            Connection conn = ConexaoDAO.getConnection();
            String sql = "SELECT * FROM pedido WHERE id = ?";
            PreparedStatement pstmt = conn.prepareCall(sql);
            pstmt.setInt(1, pedidoId);
            ResultSet rs = pstmt.executeQuery();
            
            if(rs.next()){
                jTextField1.setText(rs.getString("id"));
                jTextField2.setText(rs.getString("descricao_bebida"));
                jTextField3.setText(String.format("%.2f", rs.getDouble("v_total_pedido")));//Obtém o valor da coluna "v_total_pedido" do ResultSet como um double.
                                                                                           //Formata o valor para uma string com duas casas decimais.
            }                                                                              //Atualiza o texto do campo de texto jTextField3 para exibir o valor formatado.
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, "Erro ao buscar os dados do pedido: " +e.getMessage());
        }
    }
    /*
    O método BuscarDadosDoPedido busca os dados de um pedido específico no banco de
    dados usando o ID do pedido. Ele preenche campos de texto com o ID do pedido, a
    descrição da bebida e o valor total do pedido, exibindo uma mensagem de erro em caso
    de falha na busca.
    */
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela_caixa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela_caixa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela_caixa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela_caixa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela_caixa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
